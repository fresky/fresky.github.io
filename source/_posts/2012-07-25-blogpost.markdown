---
layout: post
title: "C# string.indexof（string)返回1！！！"
date: 2012-07-25
comments: true
categories: 
---
下面的代码第一次indexof返回0，第二次indexof返回1。<br /><br />const string softHyphenPlusHyphen = "\xAD\x2D";<br />Console.WriteLine("softHyphenPlusHyphen.IndexOf(softHyphenPlusHyphen,<br /> StringComparison.Ordinal): " + <br />softHyphenPlusHyphen.IndexOf(softHyphenPlusHyphen, <br />StringComparison.Ordinal));<br />Console.WriteLine("softHyphenPlusHyphen.IndexOf(softHyphenPlusHyphen): " + softHyphenPlusHyphen.IndexOf(softHyphenPlusHyphen));<br /><br /><br /><a href="http://msdn.microsoft.com/en-us//library/dd465121%28v=vs.110%29.aspx">Best Practices for Using Strings in the .NET Framework</a>讲了如何在.net中正确的使用字符串。摘要如下：<br /><br />When you develop with the .NET Framework, follow these simple recommendations when you use strings:<br /><br />&nbsp;&nbsp;&nbsp; Use overloads that explicitly specify the string comparison rules for string operations. Typically, this involves calling a method overload that has a parameter of type StringComparison.<br /><br />&nbsp;&nbsp;&nbsp; Use StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase for comparisons as your safe default for culture-agnostic string matching.<br /><br />&nbsp;&nbsp;&nbsp; Use comparisons with StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase for better performance.<br /><br />&nbsp;&nbsp;&nbsp; Use string operations that are based on StringComparison.CurrentCulture when you display output to the user.<br /><br />&nbsp;&nbsp;&nbsp; Use the non-linguistic StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase values instead of string operations based on CultureInfo.InvariantCulture when the comparison is linguistically irrelevant (symbolic, for example).<br /><br />&nbsp;&nbsp;&nbsp; Use the String.ToUpperInvariant method instead of the String.ToLowerInvariant method when you normalize strings for comparison.<br /><br />&nbsp;&nbsp;&nbsp; Use an overload of the String.Equals method to test whether two strings are equal.<br /><br />&nbsp;&nbsp;&nbsp; Use the String.Compare and String.CompareTo methods to sort strings, not to check for equality.<br /><br />&nbsp;&nbsp;&nbsp; Use culture-sensitive formatting to display non-string data, such as numbers and dates, in a user interface. Use formatting with the invariant culture to persist non-string data in string form.<br /><br />Avoid the following practices when you use strings:<br /><br />&nbsp;&nbsp;&nbsp; Do not use overloads that do not explicitly or implicitly specify the string comparison rules for string operations.<br /><br />&nbsp;&nbsp;&nbsp; Do not use string operations based on StringComparison.InvariantCulture in most cases. One of the few exceptions is when you are persisting linguistically meaningful but culturally agnostic data.<br /><br />&nbsp;&nbsp;&nbsp; Do not use an overload of the String.Compare or CompareTo method and test for a return value of zero to determine whether two strings are equal.<br /><br />&nbsp;&nbsp;&nbsp; Do not use culture-sensitive formatting to persist numeric data or date and time data in string form.<br /><br />下表是如何选择StringComparison：<br /><br /><img style="max-width: 800px;" src="http://images.cnblogs.com/cnblogs_com/fresky/201207/201207251534237908.png" /><br /><br /><blockquote></blockquote>