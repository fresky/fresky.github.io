---
layout: post
title: "C++应该用引用来捕捉异常"
date: 2012-12-09
comments: true
categories: 
---
<p>在C++中catch异常时的参数应该用引用，主要原因还是对象，引用，指针的构造析构原理。下面用代码实例解释一下原因。</p>  <p>先来看我们定义了两个异常，SubException继承BaseException，有一个虚函数打印信息。</p>  <div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">   <pre><span style="color: #0000ff">class</span><span style="color: #000000"> BaseException
{
</span><span style="color: #0000ff">public</span><span style="color: #000000">:
    BaseException(){ cout</span>&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">BaseExeption</span><span style="color: #800000">&quot;</span>&lt;&lt;<span style="color: #000000">endl; };
    BaseException(BaseException</span>&amp; ){cout&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">BaseExeption Copy from BaseException</span><span style="color: #800000">&quot;</span>&lt;&lt;<span style="color: #000000">endl;};
    BaseException(SubException</span>&amp; ){cout&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">BaseExeption Copy from SubException</span><span style="color: #800000">&quot;</span>&lt;&lt;<span style="color: #000000">endl;};
    </span>~BaseException(){cout&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">~BaseExeption</span><span style="color: #800000">&quot;</span>&lt;&lt;<span style="color: #000000">endl;};
    </span><span style="color: #0000ff">virtual</span> <span style="color: #0000ff">void</span> PrintMessage(){cout&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">I'm BaseException</span><span style="color: #800000">&quot;</span>&lt;&lt;<span style="color: #000000">endl;}
};

</span><span style="color: #0000ff">class</span> SubException:<span style="color: #0000ff">public</span><span style="color: #000000"> BaseException
{
</span><span style="color: #0000ff">public</span><span style="color: #000000">:
    SubException(){cout</span>&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">SubException</span><span style="color: #800000">&quot;</span>&lt;&lt;<span style="color: #000000">endl;}
    SubException(SubException</span>&amp; ):BaseException(){cout&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">SubException Copy from SubException</span><span style="color: #800000">&quot;</span>&lt;&lt;<span style="color: #000000">endl;};
    </span>~SubException(){cout&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">~SubException</span><span style="color: #800000">&quot;</span>&lt;&lt;<span style="color: #000000">endl;}
    </span><span style="color: #0000ff">virtual</span> <span style="color: #0000ff">void</span> PrintMessage(){cout&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">I'm SubException</span><span style="color: #800000">&quot;</span>&lt;&lt;<span style="color: #000000">endl;}
};</span></pre>
</div>

<h3>1. Catch对象。</h3>

<p>再来看用对象做为参数catch的例子。</p>

<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre><span style="color: #0000ff">void</span> CatchBaseObject(<span style="color: #0000ff">bool</span><span style="color: #000000"> throwbase)
{
    cout</span>&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">===================</span><span style="color: #800000">&quot;</span>&lt;&lt;endl&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">CatchBaseObject </span><span style="color: #800000">&quot;</span>&lt;&lt;(throwbase?<span style="color: #800000">&quot;</span><span style="color: #800000">ThrowBase</span><span style="color: #800000">&quot;</span>:<span style="color: #800000">&quot;</span><span style="color: #800000">ThrowSub</span><span style="color: #800000">&quot;</span>)&lt;&lt;<span style="color: #000000">endl;
    </span><span style="color: #0000ff">try</span><span style="color: #000000">
    {
        throwbase</span>? <span style="color: #0000ff">throw</span> BaseException(): <span style="color: #0000ff">throw</span><span style="color: #000000"> SubException();
    }
    </span><span style="color: #0000ff">catch</span><span style="color: #000000"> (BaseException e)
    {
        e.PrintMessage();
    }
}</span></pre>
</div>

<p>输出结果如下：</p>

<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre>===================<span style="color: #000000">
CatchBaseObject ThrowBase
BaseExeption
BaseExeption Copy </span><span style="color: #0000ff">from</span><span style="color: #000000"> BaseException
I</span><span style="color: #800000">'</span><span style="color: #800000">m BaseException</span>
~<span style="color: #000000">BaseExeption
</span>~<span style="color: #000000">BaseExeption
</span>===================<span style="color: #000000">
CatchBaseObject ThrowSub
BaseExeption
SubException
BaseExeption Copy </span><span style="color: #0000ff">from</span><span style="color: #000000"> BaseException
I</span><span style="color: #800000">'</span><span style="color: #800000">m BaseException</span>
~<span style="color: #000000">BaseExeption
</span>~<span style="color: #000000">SubException
</span>~BaseExeption</pre>
</div>

<p>从这个输出中我们可以看出问题：</p>

<ol>
  <li>有2个对象被构建出来。</li>

  <li>catch BaseException时发生了slicing，sub的信息丢掉了。</li>
</ol>

<p>除了这些问题之外，如果catch住在throw的话，要注意只能用throw，而不能用throw e，那样会再次生成临时对象，并且丢失原来的sub信息。测试代码如下：</p>

<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre><span style="color: #0000ff">void</span><span style="color: #000000"> CatchBaseObjectForThrowSubAndThrowItAgain()
{
    cout</span>&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">===================</span><span style="color: #800000">&quot;</span>&lt;&lt;endl&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">CatchBaseObjectForThrowSubAndThrowItAgain </span><span style="color: #800000">&quot;</span>&lt;&lt;<span style="color: #000000">endl;
    </span><span style="color: #0000ff">try</span><span style="color: #000000">
    {
        </span><span style="color: #0000ff">try</span><span style="color: #000000">
        {
            </span><span style="color: #0000ff">throw</span><span style="color: #000000"> SubException();
        }
        </span><span style="color: #0000ff">catch</span><span style="color: #000000"> (BaseException e)
        {
            e.PrintMessage();
            </span><span style="color: #0000ff">throw</span><span style="color: #000000"> e;
        }
    }
    </span><span style="color: #0000ff">catch</span><span style="color: #000000"> (SubException e)
    {
        e.PrintMessage();
    }
}</span></pre>
</div>

<p>输出如下：</p>

<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <p>===================
    <br />CatchBaseObjectForThrowSubAndThrowItAgain

    <br />BaseExeption

    <br />SubException

    <br />BaseExeption Copy from BaseException

    <br />I'm BaseException

    <br />BaseExeption Copy from BaseException

    <br />Press any key to continue . . .</p>
</div>

<p>再次throw时已经变成了一BaseException，所以第二个catch不能抓住，导致程序终止。</p>

<h3>2. Catch指针。</h3>

<p>如果在throw exception的地方用的栈上的对象的地址，像如下代码所示：</p>

<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre><span style="color: #0000ff">void</span> CatchBasePointer(<span style="color: #0000ff">bool</span><span style="color: #000000"> throwbase)
{
    cout</span>&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">===================</span><span style="color: #800000">&quot;</span>&lt;&lt;endl&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">CatchBasePointer </span><span style="color: #800000">&quot;</span>&lt;&lt;(throwbase?<span style="color: #800000">&quot;</span><span style="color: #800000">ThrowBase</span><span style="color: #800000">&quot;</span>:<span style="color: #800000">&quot;</span><span style="color: #800000">ThrowSub</span><span style="color: #800000">&quot;</span>)&lt;&lt;<span style="color: #000000">endl;
    </span><span style="color: #0000ff">try</span><span style="color: #000000">
    {
        throwbase</span>? <span style="color: #0000ff">throw</span> &amp;BaseException(): <span style="color: #0000ff">throw</span> &amp;<span style="color: #000000">SubException();
    }
    </span><span style="color: #0000ff">catch</span> (BaseException*<span style="color: #000000"> e)
    {
        e</span>-&gt;<span style="color: #000000">PrintMessage();
    }
}</span></pre>
</div>

<p>得到输出如下：</p>

<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre>===================<span style="color: #000000">
CatchBasePointer ThrowBase
BaseExeption
</span>~<span style="color: #000000">BaseExeption
I</span><span style="color: #800000">'</span><span style="color: #800000">m BaseException</span>
===================<span style="color: #000000">
CatchBasePointer ThrowSub
BaseExeption
SubException
</span>~<span style="color: #000000">SubException
</span>~<span style="color: #000000">BaseExeption
I</span><span style="color: #800000">'</span><span style="color: #800000">m BaseException</span></pre>
</div>

<p>我们可以看到如下问题：</p>

<ol>
  <li>生成的那个exception时临时对象，除了try块就被析构了。</li>

  <li>catch住的异常对象发生了slicing。</li>
</ol>

<p>为了保证不被析构，我们得new在堆上或者用static，如下代码展示用static：</p>

<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre><span style="color: #0000ff">void</span><span style="color: #000000"> CatchBasePointerThrowStaticSub()
{
    cout</span>&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">===================</span><span style="color: #800000">&quot;</span>&lt;&lt;endl&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">CatchBasePointerThrowStaticSub </span><span style="color: #800000">&quot;</span>&lt;&lt;<span style="color: #000000">endl;
    </span><span style="color: #0000ff">try</span><span style="color: #000000">
    {
        </span><span style="color: #0000ff">static</span><span style="color: #000000"> SubException s;
        </span><span style="color: #0000ff">throw</span> &amp;<span style="color: #000000">s;
    }
    </span><span style="color: #0000ff">catch</span> (BaseException*<span style="color: #000000"> e)
    {
        e</span>-&gt;<span style="color: #000000">PrintMessage();
    }
}</span></pre>
</div>

<p>得到输入如下：</p>

<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre>===================<span style="color: #000000">
CatchBasePointerThrowStaticSub
BaseExeption
SubException
I</span><span style="color: #800000">'</span><span style="color: #800000">m SubException</span></pre>
</div>

<p>这时这个对象还在，因为用的是指针，所以也还有多态，但是要不要delete就不好办了，如果是static的，不需要delete，但是如果是new出来的，需要delete。</p>

<h3>3.Catch引用。</h3>

<p>如果换成引用，输出如下：</p>

<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre>===================<span style="color: #000000">
CatchBaseRef ThrowBase
BaseExeption
I</span><span style="color: #800000">'</span><span style="color: #800000">m BaseException</span>
~<span style="color: #000000">BaseExeption
</span>===================<span style="color: #000000">
CatchBaseRef ThrowSub
BaseExeption
SubException
I</span><span style="color: #800000">'</span><span style="color: #800000">m SubException</span>
~<span style="color: #000000">SubException
</span>~BaseExeption</pre>
</div>


我们可以看到，没有多余的临时对象被创建出来，而且保持了多态，是我们期望的行为。











<p>所以永远要用引用的方式来捕捉异常。本文例子的完整代码在<a href="https://github.com/fresky/CppExample">github</a>上。</p>