---
layout: post
title: "怎么看C++对象的内存结构 和 怎么解密C++的name mangling"
date: 2012-12-23
comments: true
categories: 
---
<p><a href="http://eli.thegreenplace.net/2012/12/17/dumping-a-c-objects-memory-layout-with-clang/">Dumping a C++ object’s memory layout with Clang</a>这篇文章讲述了怎么用Clang来看C++对象的结构，回复中Marek提到了怎么在Visual Studio中看。具体方法如下：</p>  <p>C++项目右键属性，C/C++下的Command Line，加上这个选项</p>  <div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">   <pre>/d1reportAllClassLayout</pre>
</div>

<p>这样在编译时就会在output窗口看到所有的对象的内存结构了。</p>

<p>由于C++编译器会做Name Mangling，我们可以用<strong>undname</strong>这个工具来看到没有被mangling样子。</p>



<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre>&gt;<span style="color: #000000">undname
Microsoft (R) C</span>++<span style="color: #000000"> Name Undecorator
Copyright (C) Microsoft Corporation. All rights reserved.

Usage: undname [flags] fname [fname...]
   or: undname [flags] file</span></pre>
</div>



<p>&#160;</p>

<p>下面是个例子，假设我们有如下的A和B两个类。</p>

<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre><span style="color: #0000ff">class</span><span style="color: #000000"> A
{
    </span><span style="color: #0000ff">int</span><span style="color: #000000"> a;
</span><span style="color: #0000ff">public</span><span style="color: #000000">:
    </span><span style="color: #0000ff">void</span> <span style="color: #0000ff">virtual</span><span style="color: #000000"> foo(){};
};

</span><span style="color: #0000ff">class</span> B:<span style="color: #0000ff">public</span><span style="color: #000000"> A
{
    </span><span style="color: #0000ff">int</span><span style="color: #000000"> b;
</span><span style="color: #0000ff">public</span><span style="color: #000000">:
    </span><span style="color: #0000ff">void</span><span style="color: #000000"> foo(){};
};</span></pre>
</div>

<p>它们通过<strong>/d1reportAllClassLayout</strong>的结果如下：</p>

<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre><span style="color: #800080">1</span>&gt;  <span style="color: #0000ff">class</span> A    size(<span style="color: #800080">8</span><span style="color: #000000">):
</span><span style="color: #800080">1</span>&gt;      +---
<span style="color: #800080">1</span>&gt;   <span style="color: #800080">0</span>    |<span style="color: #000000"> {vfptr}
</span><span style="color: #800080">1</span>&gt;   <span style="color: #800080">4</span>    |<span style="color: #000000"> a
</span><span style="color: #800080">1</span>&gt;      +---
<span style="color: #800080">1</span>&gt;  
<span style="color: #800080">1</span>&gt;<span style="color: #000000">  A::$vftable@:
</span><span style="color: #800080">1</span>&gt;      | &amp;<span style="color: #000000">A_meta
</span><span style="color: #800080">1</span>&gt;      |  <span style="color: #800080">0</span>
<span style="color: #800080">1</span>&gt;   <span style="color: #800080">0</span>    | &amp;<span style="color: #000000">A::foo
</span><span style="color: #800080">1</span>&gt;  
<span style="color: #800080">1</span>&gt;  A::foo <span style="color: #0000ff">this</span> adjustor: <span style="color: #800080">0</span>
<span style="color: #800080">1</span>&gt;  
<span style="color: #800080">1</span>&gt;  
<span style="color: #800080">1</span>&gt;  <span style="color: #0000ff">class</span> B    size(<span style="color: #800080">12</span><span style="color: #000000">):
</span><span style="color: #800080">1</span>&gt;      +---
<span style="color: #800080">1</span>&gt;      | +--- (<span style="color: #0000ff">base</span> <span style="color: #0000ff">class</span><span style="color: #000000"> A)
</span><span style="color: #800080">1</span>&gt;   <span style="color: #800080">0</span>    | |<span style="color: #000000"> {vfptr}
</span><span style="color: #800080">1</span>&gt;   <span style="color: #800080">4</span>    | |<span style="color: #000000"> a
</span><span style="color: #800080">1</span>&gt;      | +---
<span style="color: #800080">1</span>&gt;   <span style="color: #800080">8</span>    |<span style="color: #000000"> b
</span><span style="color: #800080">1</span>&gt;      +---
<span style="color: #800080">1</span>&gt;  
<span style="color: #800080">1</span>&gt;<span style="color: #000000">  B::$vftable@:
</span><span style="color: #800080">1</span>&gt;      | &amp;<span style="color: #000000">B_meta
</span><span style="color: #800080">1</span>&gt;      |  <span style="color: #800080">0</span>
<span style="color: #800080">1</span>&gt;   <span style="color: #800080">0</span>    | &amp;<span style="color: #000000">B::foo
</span><span style="color: #800080">1</span>&gt;  
<span style="color: #800080">1</span>&gt;  B::foo <span style="color: #0000ff">this</span> adjustor: <span style="color: #800080">0</span></pre>
</div>