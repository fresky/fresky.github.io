---
layout: post
title: "C++的几个晦涩特性"
date: 2013-05-06
comments: true
categories: 
---
<p><a href="http://madebyevan.com/obscure-cpp-features/">Obscure C++ Features - Made by Evan</a>列举了几个C++的晦涩特性，挺有意思的，下面简单列几个：</p>  <h3>[]是啥意思</h3>  <p><code>ptr[3]只是 <code>*(ptr + 3) 的简写，所以也就是 <code>*(3 + ptr)，所以它和 <code>3[ptr] 是一样的。</code></code></code></code></p>  <h3><code><code><code><code>运算符重载</code></code></code></code></h3>  <p><code><code><code><code>运算符重载可以做很多奇怪的事情，比如可以通过运算符重载实现python style的print。如下：</code></code></code></code></p>  <div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">   <pre><span style="color: #0000ff">namespace</span><span style="color: #000000"> __hidden__ {
    </span><span style="color: #0000ff">struct</span><span style="color: #000000"> print {
        </span><span style="color: #0000ff">bool</span><span style="color: #000000"> space;
        print() : space(</span><span style="color: #0000ff">false</span><span style="color: #000000">) {}
        </span>~print() { std::cout &lt;&lt;<span style="color: #000000"> std::endl; }

        template </span>&lt;typename T&gt;<span style="color: #000000">
        print </span>&amp;<span style="color: #0000ff">operator</span> , (<span style="color: #0000ff">const</span> T &amp;<span style="color: #000000">t) {
            </span><span style="color: #0000ff">if</span> (space) std::cout &lt;&lt; <span style="color: #800000">'</span> <span style="color: #800000">'</span><span style="color: #000000">;
            </span><span style="color: #0000ff">else</span> space = <span style="color: #0000ff">true</span><span style="color: #000000">;
            std::cout </span>&lt;&lt;<span style="color: #000000"> t;
            </span><span style="color: #0000ff">return</span> *<span style="color: #0000ff">this</span><span style="color: #000000">;
        }
    };
}

</span><span style="color: #0000ff">#define</span> print __hidden__::print(),

<span style="color: #0000ff">int</span><span style="color: #000000"> main() {
    
     </span><span style="color: #0000ff">int</span> a = <span style="color: #800080">1</span>, b = <span style="color: #800080">2</span><span style="color: #000000">;

     print </span><span style="color: #800000">&quot;</span><span style="color: #800000">this is a test</span><span style="color: #800000">&quot;</span><span style="color: #000000">;
     print </span><span style="color: #800000">&quot;</span><span style="color: #800000">the sum of</span><span style="color: #800000">&quot;</span>, a, <span style="color: #800000">&quot;</span><span style="color: #800000">and</span><span style="color: #800000">&quot;</span>, b, <span style="color: #800000">&quot;</span><span style="color: #800000">is</span><span style="color: #800000">&quot;</span>, a +<span style="color: #000000"> b;

    </span><span style="color: #0000ff">return</span> <span style="color: #800080">0</span><span style="color: #000000">;
}</span></pre>
</div>

<h3><code><code><code><code>函数的try</code></code></code></code></h3>

<p>可以在函数名称后面加上try，对应整个函数体。例如下面的代码。</p>

<p><code><code><code><code></code></code></code></code></p>



<div style="border-bottom: #cccccc 1px solid; border-left: #cccccc 1px solid; padding-bottom: 5px; background-color: #f5f5f5; padding-left: 5px; padding-right: 5px; border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; padding-top: 5px" class="cnblogs_code">
  <pre><span style="color: #0000ff">int</span> f() { <span style="color: #0000ff">throw</span> <span style="color: #800080">0</span><span style="color: #000000">; }

</span><span style="color: #008000">//</span><span style="color: #008000"> Here there is no way to catch the error thrown by f()</span>
<span style="color: #0000ff">struct</span><span style="color: #000000"> A {
  </span><span style="color: #0000ff">int</span><span style="color: #000000"> a;
  A::A() : a(f()) {}
};

</span><span style="color: #008000">//</span><span style="color: #008000"> The value thrown from f() can be caught if a try-catch block is used as
</span><span style="color: #008000">//</span><span style="color: #008000"> the function body and the initializer list is moved after the try keyword</span>
<span style="color: #0000ff">struct</span><span style="color: #000000"> B {
  </span><span style="color: #0000ff">int</span><span style="color: #000000"> b;
  B::B() </span><span style="color: #0000ff">try</span><span style="color: #000000"> : b(f()) {
  } </span><span style="color: #0000ff">catch</span>(<span style="color: #0000ff">int</span><span style="color: #000000"> e) {
  }
  </span><span style="color: #0000ff">int</span> B::C() <span style="color: #0000ff">try</span><span style="color: #000000">{
      </span><span style="color: #0000ff">throw</span> <span style="color: #800080">2</span><span style="color: #000000">;
      </span><span style="color: #0000ff">return</span> <span style="color: #800080">1</span><span style="color: #000000">;
  } </span><span style="color: #0000ff">catch</span>(<span style="color: #0000ff">int</span><span style="color: #000000"> e) {
      cout</span>&lt;&lt;<span style="color: #800000">&quot;</span><span style="color: #800000">exception </span><span style="color: #800000">&quot;</span>&lt;&lt;e&lt;&lt;<span style="color: #000000">endl;
  }
};</span></pre>
</div>