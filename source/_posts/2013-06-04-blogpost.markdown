---
layout: post
title: "正则表达式中\\d和[0-0]有什么区别"
date: 2013-06-04
comments: true
categories: 
---
<p>今天看到Stackoverflow上一个有趣的<a href="http://stackoverflow.com/questions/16621738/d-is-less-efficient-than-0-9?newsletter=1&amp;nlcode=55866%7cc739">问题</a>，为什么正则表达式在中\d比[0-0]低效？</p>
<p>提问者用了如下的代码来做测试：</p>

<div class="cnblogs_code" style="background-color: #f5f5f5; border: #cccccc 1px solid; padding: 5px;">
<pre><span style="color: #0000ff;">        static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span><span style="color: #000000;">[] args)
        {
            </span><span style="color: #0000ff;">var</span> rand = <span style="color: #0000ff;">new</span> Random(<span style="color: #800080;">1234</span><span style="color: #000000;">);
            </span><span style="color: #0000ff;">var</span> strings = <span style="color: #0000ff;">new</span> List&lt;<span style="color: #0000ff;">string</span>&gt;<span style="color: #000000;">();
            </span><span style="color: #008000;">//</span><span style="color: #008000;">10K random strings</span>
            <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> i = <span style="color: #800080;">0</span>; i &lt; <span style="color: #800080;">10000</span>; i++<span style="color: #000000;">)
            {
                </span><span style="color: #008000;">//</span><span style="color: #008000;">Generate random string</span>
                <span style="color: #0000ff;">var</span> sb = <span style="color: #0000ff;">new</span><span style="color: #000000;"> StringBuilder();
                </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> c = <span style="color: #800080;">0</span>; c &lt; <span style="color: #800080;">1000</span>; c++<span style="color: #000000;">)
                {
                    </span><span style="color: #008000;">//</span><span style="color: #008000;">Add a-z randomly</span>
                    sb.Append((<span style="color: #0000ff;">char</span>)(<span style="color: #800000;">'</span><span style="color: #800000;">a</span><span style="color: #800000;">'</span> + rand.Next(<span style="color: #800080;">26</span><span style="color: #000000;">)));
                }
                </span><span style="color: #008000;">//</span><span style="color: #008000;">In roughly 50% of them, put a digit</span>
                <span style="color: #0000ff;">if</span> (rand.Next(<span style="color: #800080;">2</span>) == <span style="color: #800080;">0</span><span style="color: #000000;">)
                {
                    </span><span style="color: #008000;">//</span><span style="color: #008000;">Replace one character with a digit, 0-9</span>
                    sb[rand.Next(sb.Length)] = (<span style="color: #0000ff;">char</span>)(<span style="color: #800000;">'</span><span style="color: #800000;">0</span><span style="color: #800000;">'</span> + rand.Next(<span style="color: #800080;">10</span><span style="color: #000000;">));
                }
                strings.Add(sb.ToString());
            }

            </span><span style="color: #0000ff;">var</span> baseTime = testPerfomance(strings, <span style="color: #800000;">@"</span><span style="color: #800000;">\d</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            Console.WriteLine();
            </span><span style="color: #0000ff;">var</span> testTime = testPerfomance(strings, <span style="color: #800000;">"</span><span style="color: #800000;">[0-9]</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">  {0:P2} of first</span><span style="color: #800000;">"</span>, testTime.TotalMilliseconds /<span style="color: #000000;"> baseTime.TotalMilliseconds);
            testTime </span>= testPerfomance(strings, <span style="color: #800000;">"</span><span style="color: #800000;">[0123456789]</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">  {0:P2} of first</span><span style="color: #800000;">"</span>, testTime.TotalMilliseconds /<span style="color: #000000;"> baseTime.TotalMilliseconds);
        }

        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> TimeSpan testPerfomance(List&lt;<span style="color: #0000ff;">string</span>&gt; strings, <span style="color: #0000ff;">string</span><span style="color: #000000;"> regex)
        {
            </span><span style="color: #0000ff;">var</span> sw = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Stopwatch();

            </span><span style="color: #0000ff;">int</span> successes = <span style="color: #800080;">0</span><span style="color: #000000;">;

            </span><span style="color: #0000ff;">var</span> rex = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Regex(regex);

            sw.Start();
            </span><span style="color: #0000ff;">foreach</span> (<span style="color: #0000ff;">var</span> str <span style="color: #0000ff;">in</span><span style="color: #000000;"> strings)
            {
                </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (rex.Match(str).Success)
                {
                    successes</span>++<span style="color: #000000;">;
                }
            }
            sw.Stop();

            Console.Write(</span><span style="color: #800000;">"</span><span style="color: #800000;">Regex {0,-12} took {1} result: {2}/{3}</span><span style="color: #800000;">"</span><span style="color: #000000;">, regex, sw.Elapsed, successes, strings.Count);

            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> sw.Elapsed;
        }
    }</span></pre>
</div>
<p>得到的输出结果是：</p>


<div class="cnblogs_code" style="background-color: #f5f5f5; border: #cccccc 1px solid; padding: 5px;">
<pre>Regular expression \d           took <span style="color: #800080;">00</span>:<span style="color: #800080;">00</span>:<span style="color: #800080;">00.2141226</span> result: <span style="color: #800080;">5077</span>/<span style="color: #800080;">10000</span><span style="color: #000000;">
Regular expression [</span><span style="color: #800080;">0</span>-<span style="color: #800080;">9</span>]        took <span style="color: #800080;">00</span>:<span style="color: #800080;">00</span>:<span style="color: #800080;">00.1357972</span> result: <span style="color: #800080;">5077</span>/<span style="color: #800080;">10000</span>  <span style="color: #800080;">63.42</span> %<span style="color: #000000;"> of first
Regular expression [</span><span style="color: #800080;">0123456789</span>] took <span style="color: #800080;">00</span>:<span style="color: #800080;">00</span>:<span style="color: #800080;">00.1388997</span> result: <span style="color: #800080;">5077</span>/<span style="color: #800080;">10000</span>  <span style="color: #800080;">64.87</span> % of first</pre>
</div>
<p>从这个测试中可以看出\d比[0-9]慢了一倍。</p>
<h3>&nbsp;</h3>
<p>原因在于，\d会比较所有的unicode的数字，包括</p>


<div class="cnblogs_code" style="background-color: #f5f5f5; border: #cccccc 1px solid; padding: 5px;">
<pre><span style="color: #800080;">0123456789٠١٢٣٤٥٦٧٨٩۰۱۲۳۴۵۶۷۸۹߀߁߂߃߄߅߆߇߈߉०१२३४५६७८९০১২৩৪৫৬৭৮৯੦੧੨੩੪੫੬੭੮੯૦૧૨૩૪૫૬૭૮૯୦୧୨୩୪୫୬୭୮୯௦௧௨௩௪௫௬௭௮௯౦౧౨౩౪౫౬౭౮౯೦೧೨೩೪೫೬೭೮೯൦൧൨൩൪൫൬൭൮൯๐๑๒๓๔๕๖๗๘๙໐໑໒໓໔໕໖໗໘໙༠༡༢༣༤༥༦༧༨༩၀၁၂၃၄၅၆၇၈၉႐႑႒႓႔႕႖႗႘႙០១២៣៤៥៦៧៨៩᠐᠑᠒᠓᠔᠕᠖᠗᠘᠙᥆᥇᥈᥉᥊᥋᥌᥍᥎᥏᧐᧑᧒᧓᧔᧕᧖᧗᧘᧙᭐᭑᭒᭓᭔᭕᭖᭗᭘᭙᮰᮱᮲᮳᮴᮵᮶᮷᮸᮹᱀᱁᱂᱃᱄᱅᱆᱇᱈᱉᱐᱑᱒᱓᱔᱕᱖᱗᱘᱙꘠꘡꘢꘣꘤꘥꘦꘧꘨꘩꣐꣑꣒꣓꣔꣕꣖꣗꣘꣙꤀꤁꤂꤃꤄꤅꤆꤇꤈꤉꩐꩑꩒꩓꩔꩕꩖꩗꩘꩙０１２３４５６７８９</span></pre>
</div>
<p>可以从<a href="http://www.fileformat.info/info/unicode/category/Nd/list.htm">这里</a>看到更全的列表，列出了所有Unicode中属于数字的字符。</p>
<h3>&nbsp;</h3>
<p>如果在生成Regex的时候传入一个参数<code>RegexOptions.ECMAScript</code>，如下所示，那么\d就和[0-9]的效率一样了。可以从<a href="http://msdn.microsoft.com/en-us/library/yd1hzczs.aspx">这里</a>找到更多的Regex的选项。</p>


<div class="cnblogs_code" style="background-color: #f5f5f5; border: #cccccc 1px solid; padding: 5px;">
<pre><span style="color: #0000ff;">var</span> rex = <span style="color: #0000ff;">new</span> Regex(regex, RegexOptions.ECMAScript);</pre>
</div>